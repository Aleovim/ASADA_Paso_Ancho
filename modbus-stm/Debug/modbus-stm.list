
modbus-stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08003b40  08003b40  00013b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e24  08003e24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e2c  08003e2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003e40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003e40  00020154  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f47a  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f7  00000000  00000000  0002f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000316a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00032680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192b1  00000000  00000000  00033590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e607  00000000  00000000  0004c841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d733  00000000  00000000  0005ae48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f857b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004144  00000000  00000000  000f85cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08003b28 	.word	0x08003b28

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08003b28 	.word	0x08003b28

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b0a2      	sub	sp, #136	; 0x88
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fe57 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f843 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f933 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f8e5 	bl	80006b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004ee:	f000 f897 	bl	8000620 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Control variables for Modbus polling frequency
  uint32_t then = 0, now = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80004f8:	2300      	movs	r3, #0
 80004fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  int state = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  // Initialize the indicator LED to low
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2120      	movs	r1, #32
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <main+0x88>)
 8000508:	f001 f8fa 	bl	8001700 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Get the current time
    now = HAL_GetTick();
 800050c:	f000 feac 	bl	8001268 <HAL_GetTick>
 8000510:	67f8      	str	r0, [r7, #124]	; 0x7c
  
    // Send requests at a certain frequency
    if (now - then >= POLLING_FREQ_MS) {
 8000512:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800051e:	d3f5      	bcc.n	800050c <main+0x34>
      // Toggle the indicator LED at the Modbus polling frequency, for verification purposes
      if (state == 0) {
 8000520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000524:	2b00      	cmp	r3, #0
 8000526:	d108      	bne.n	800053a <main+0x62>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2120      	movs	r1, #32
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x88>)
 800052e:	f001 f8e7 	bl	8001700 <HAL_GPIO_WritePin>
        state = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000538:	e007      	b.n	800054a <main+0x72>
      }
      else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2120      	movs	r1, #32
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <main+0x88>)
 8000540:	f001 f8de 	bl	8001700 <HAL_GPIO_WritePin>
        state = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      then = now;
 800054a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800054c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      /****** Add Modbus requests to send at the polling frequency ******/
      ForwardVolume_ui32(&mb_handler, &huart1, &huart2);
 8000550:	463b      	mov	r3, r7
 8000552:	4a04      	ldr	r2, [pc, #16]	; (8000564 <main+0x8c>)
 8000554:	4904      	ldr	r1, [pc, #16]	; (8000568 <main+0x90>)
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fce2 	bl	8000f20 <ForwardVolume_ui32>
    now = HAL_GetTick();
 800055c:	e7d6      	b.n	800050c <main+0x34>
 800055e:	bf00      	nop
 8000560:	48000400 	.word	0x48000400
 8000564:	200000bc 	.word	0x200000bc
 8000568:	20000028 	.word	0x20000028

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b09a      	sub	sp, #104	; 0x68
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2248      	movs	r2, #72	; 0x48
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 facc 	bl	8003b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000592:	f001 f8cd 	bl	8001730 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ff70 	bl	800047c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <SystemClock_Config+0xb0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005a4:	4a1d      	ldr	r2, [pc, #116]	; (800061c <SystemClock_Config+0xb0>)
 80005a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <SystemClock_Config+0xb0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b8:	2324      	movs	r3, #36	; 0x24
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005bc:	2381      	movs	r3, #129	; 0x81
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005c8:	23b0      	movs	r3, #176	; 0xb0
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fb55 	bl	8001c84 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005e0:	f000 f8e2 	bl	80007a8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005e4:	234f      	movs	r3, #79	; 0x4f
 80005e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fec0 	bl	8002388 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060e:	f000 f8cb 	bl	80007a8 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3768      	adds	r7, #104	; 0x68
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	58000400 	.word	0x58000400

08000620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000626:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <MX_USART1_UART_Init+0x94>)
 8000628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800062c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800066a:	f002 fb6a 	bl	8002d42 <HAL_UART_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000674:	f000 f898 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800067c:	f003 f95f 	bl	800393e <HAL_UARTEx_SetTxFifoThreshold>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000686:	f000 f88f 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4808      	ldr	r0, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800068e:	f003 f994 	bl	80039ba <HAL_UARTEx_SetRxFifoThreshold>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000698:	f000 f886 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800069e:	f003 f916 	bl	80038ce <HAL_UARTEx_DisableFifoMode>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006a8:	f000 f87e 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40013800 	.word	0x40013800

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006be:	4a23      	ldr	r2, [pc, #140]	; (800074c <MX_USART2_UART_Init+0x94>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000700:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x90>)
 8000702:	f002 fb1e 	bl	8002d42 <HAL_UART_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 f84c 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_USART2_UART_Init+0x90>)
 8000714:	f003 f913 	bl	800393e <HAL_UARTEx_SetTxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800071e:	f000 f843 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x90>)
 8000726:	f003 f948 	bl	80039ba <HAL_UARTEx_SetRxFifoThreshold>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000730:	f000 f83a 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_USART2_UART_Init+0x90>)
 8000736:	f003 f8ca 	bl	80038ce <HAL_UARTEx_DisableFifoMode>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000740:	f000 f832 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000bc 	.word	0x200000bc
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000764:	2004      	movs	r0, #4
 8000766:	f7ff fe9e 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff fe9b 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff fe98 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2120      	movs	r1, #32
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <MX_GPIO_Init+0x54>)
 800077c:	f000 ffc0 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000780:	2320      	movs	r3, #32
 8000782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_GPIO_Init+0x54>)
 8000796:	f000 fe53 	bl	8001440 <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	48000400 	.word	0x48000400

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80007c0:	23ff      	movs	r3, #255	; 0xff
 80007c2:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80007c4:	23ff      	movs	r3, #255	; 0xff
 80007c6:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80007c8:	e013      	b.n	80007f2 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	4053      	eors	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <crc16+0x64>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	4413      	add	r3, r2
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	4053      	eors	r3, r2
 80007e6:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <crc16+0x68>)
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80007f2:	887b      	ldrh	r3, [r7, #2]
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	807a      	strh	r2, [r7, #2]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1e6      	bne.n	80007ca <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	b29b      	uxth	r3, r3
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	08003b5c 	.word	0x08003b5c
 800081c:	08003c5c 	.word	0x08003c5c

08000820 <ReadNRegs>:
#include "modbus_crc.h"
#include <stdlib.h>

/****** Modbus communication functions ******/
// Read one or more holding or input registers via Modbus
void ReadNRegs(struct ModbusHandler *handler, UART_HandleTypeDef *modbus_uart, int numRegisterstoRead, int signedValueSizeinBits){
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
    // Create Modbus PDU
	handler->TxData[0] = SLAVE_ID;  // slave address
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2203      	movs	r2, #3
 8000832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    // Function code
	if (ReadFromIreg == 1) handler->TxData[1] = READIREGS;
	else handler->TxData[1] = READHREGS;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2203      	movs	r2, #3
 800083a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	handler->TxData[2] = 0x0; // register address high byte
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	// low byte is set in the calling function

	handler->TxData[4] = 0x0; // number of registers high byte
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// number of registers low byte
	// calculated from the number of values to read and their size
	// e. g.: 1 32 bit value requires 2 registers (2 x 16 bits)
	handler->TxData[5] = numRegisterstoRead * abs(signedValueSizeinBits)/16;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	bfb8      	it	lt
 8000854:	425b      	neglt	r3, r3
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	fb02 f303 	mul.w	r3, r2, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	da00      	bge.n	8000862 <ReadNRegs+0x42>
 8000860:	330f      	adds	r3, #15
 8000862:	111b      	asrs	r3, r3, #4
 8000864:	b2da      	uxtb	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	// number of values included in slave response
	// is only 1 or 16 for Octave meters
	if (numRegisterstoRead == 16) handler->ValuesInResponse = 16;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b10      	cmp	r3, #16
 8000870:	d103      	bne.n	800087a <ReadNRegs+0x5a>
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2210      	movs	r2, #16
 8000876:	66da      	str	r2, [r3, #108]	; 0x6c
 8000878:	e002      	b.n	8000880 <ReadNRegs+0x60>
	else handler->ValuesInResponse = 1;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2201      	movs	r2, #1
 800087e:	66da      	str	r2, [r3, #108]	; 0x6c

	handler->signedResponseSizeinBits = signedValueSizeinBits;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	671a      	str	r2, [r3, #112]	; 0x70

	uint16_t crc = crc16(handler->TxData, 6);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3325      	adds	r3, #37	; 0x25
 800088a:	2106      	movs	r1, #6
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff91 	bl	80007b4 <crc16>
 8000892:	4603      	mov	r3, r0
 8000894:	82fb      	strh	r3, [r7, #22]
	handler->TxData[6] = crc&0xFF;   // CRC low
 8000896:	8afb      	ldrh	r3, [r7, #22]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	handler->TxData[7] = (crc>>8)&0xFF;  // CRC high
 80008a0:	8afb      	ldrh	r3, [r7, #22]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	// Flag this as a reading (not writing) operation
	handler->ReadOperation = 1;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2201      	movs	r2, #1
 80008b2:	675a      	str	r2, [r3, #116]	; 0x74

	// Send the Modbus PDU to the slave
	HAL_UART_Transmit(modbus_uart, handler->TxData, 8, 100);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	2208      	movs	r2, #8
 80008be:	68b8      	ldr	r0, [r7, #8]
 80008c0:	f002 fa8f 	bl	8002de2 <HAL_UART_Transmit>
}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <ModbusReceive>:
	// Send the Modbus PDU to the slave
	HAL_UART_Transmit(modbus_uart, handler->TxData, 8, 100);
}

// Receive a Modbus response from the slave in blocking mode
void ModbusReceive(struct ModbusHandler *handler, UART_HandleTypeDef *echo_uart, UART_HandleTypeDef *modbus_uart){
 80008cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d0:	b0c3      	sub	sp, #268	; 0x10c
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80008d8:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80008dc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
	if (handler->ReadOperation == 1){
 80008e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80008e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	f040 82eb 	bne.w	8000ec2 <ModbusReceive+0x5f6>
	  if (handler->signedResponseSizeinBits == s_int16){
 80008ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80008f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008f2:	2b10      	cmp	r3, #16
 80008f4:	d173      	bne.n	80009de <ModbusReceive+0x112>
		// calculate how many bytes will be received depending on the amount of requested values
		if (handler->ValuesInResponse == 16) HAL_UART_Receive(modbus_uart, handler->RxData, 37, 100); // 100ms timeout
 80008f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80008fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	d108      	bne.n	8000912 <ModbusReceive+0x46>
 8000900:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000904:	2364      	movs	r3, #100	; 0x64
 8000906:	2225      	movs	r2, #37	; 0x25
 8000908:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800090c:	f002 faef 	bl	8002eee <HAL_UART_Receive>
 8000910:	e007      	b.n	8000922 <ModbusReceive+0x56>
		else HAL_UART_Receive(modbus_uart, handler->RxData, 7, 100); // 100ms timeout
 8000912:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	2207      	movs	r2, #7
 800091a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800091e:	f002 fae6 	bl	8002eee <HAL_UART_Receive>

		for (int i = 0; i < handler->ValuesInResponse; i++){
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000928:	e039      	b.n	800099e <ModbusReceive+0xd2>
			// Save each of the incoming values to the buffer
			handler->int16Buffer[i] = handler->RxData[i+i+3]<<8 | handler->RxData[i+i+4];
 800092a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	3303      	adds	r3, #3
 8000932:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000936:	5cd3      	ldrb	r3, [r2, r3]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b21a      	sxth	r2, r3
 800093c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000940:	3302      	adds	r3, #2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000948:	5ccb      	ldrb	r3, [r1, r3]
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	b299      	uxth	r1, r3
 8000952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000956:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800095a:	3218      	adds	r2, #24
 800095c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			// Print the values to serial, for visualization or debugging
			HAL_UART_Transmit(echo_uart, &handler->RxData[i+i+3], 1, 100);
 8000960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	3303      	adds	r3, #3
 8000968:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800096c:	18d1      	adds	r1, r2, r3
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	2201      	movs	r2, #1
 8000972:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000976:	f002 fa34 	bl	8002de2 <HAL_UART_Transmit>
			HAL_UART_Transmit(echo_uart, &handler->RxData[i+i+4], 1, 100);
 800097a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800097e:	3302      	adds	r3, #2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000986:	18d1      	adds	r1, r2, r3
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	2201      	movs	r2, #1
 800098c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000990:	f002 fa27 	bl	8002de2 <HAL_UART_Transmit>
		for (int i = 0; i < handler->ValuesInResponse; i++){
 8000994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000998:	3301      	adds	r3, #1
 800099a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800099e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80009a4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbbe      	blt.n	800092a <ModbusReceive+0x5e>
		}

		// Clear the unused buffers
		handler->int32Buffer = 0;
 80009ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009b0:	2200      	movs	r2, #0
 80009b2:	655a      	str	r2, [r3, #84]	; 0x54
		handler->uint32Buffer = 0;
 80009b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009b8:	2200      	movs	r2, #0
 80009ba:	651a      	str	r2, [r3, #80]	; 0x50
		handler->int64Buffer = 0;
 80009bc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		handler->uint64Buffer = 0;
 80009cc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80009d0:	f04f 0200 	mov.w	r2, #0
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		// Print the values to serial, for visualization or debugging
		HAL_UART_Transmit(echo_uart, &handler->RxData[4], 1, 100);
		HAL_UART_Transmit(echo_uart, &handler->RxData[5], 1, 100);
	}
}
 80009dc:	e29a      	b.n	8000f14 <ModbusReceive+0x648>
			for (int i = 0; i < 16; i++){
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80009e4:	e00d      	b.n	8000a02 <ModbusReceive+0x136>
				handler->int16Buffer[i] = 0;
 80009e6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80009ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80009ee:	f103 0218 	add.w	r2, r3, #24
 80009f2:	2300      	movs	r3, #0
 80009f4:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (int i = 0; i < 16; i++){
 80009f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80009fc:	3301      	adds	r3, #1
 80009fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000a02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	dded      	ble.n	80009e6 <ModbusReceive+0x11a>
			if ((handler->signedResponseSizeinBits == s_uint32) | (handler->signedResponseSizeinBits == s_int32)){
 8000a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a10:	2b20      	cmp	r3, #32
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a20:	f113 0f20 	cmn.w	r3, #32
 8000a24:	bf0c      	ite	eq
 8000a26:	2301      	moveq	r3, #1
 8000a28:	2300      	movne	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d079      	beq.n	8000b28 <ModbusReceive+0x25c>
				HAL_UART_Receive(modbus_uart, handler->RxData, 9, 100); // 100ms timeout
 8000a34:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000a38:	2364      	movs	r3, #100	; 0x64
 8000a3a:	2209      	movs	r2, #9
 8000a3c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000a40:	f002 fa55 	bl	8002eee <HAL_UART_Receive>
				if (handler->signedResponseSizeinBits == s_uint32){
 8000a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a4a:	2b20      	cmp	r3, #32
 8000a4c:	d129      	bne.n	8000aa2 <ModbusReceive+0x1d6>
					handler->uint32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a52:	78db      	ldrb	r3, [r3, #3]
 8000a54:	061a      	lsls	r2, r3, #24
							(uint32_t)handler->RxData[4]<<16 |
 8000a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	041b      	lsls	r3, r3, #16
					handler->uint32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000a5e:	431a      	orrs	r2, r3
							(uint32_t)handler->RxData[5]<<8 | (uint32_t)handler->RxData[6];
 8000a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a64:	795b      	ldrb	r3, [r3, #5]
 8000a66:	021b      	lsls	r3, r3, #8
							(uint32_t)handler->RxData[4]<<16 |
 8000a68:	4313      	orrs	r3, r2
							(uint32_t)handler->RxData[5]<<8 | (uint32_t)handler->RxData[6];
 8000a6a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000a6e:	7992      	ldrb	r2, [r2, #6]
 8000a70:	431a      	orrs	r2, r3
					handler->uint32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a76:	651a      	str	r2, [r3, #80]	; 0x50
					handler->int32Buffer = 0;
 8000a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	655a      	str	r2, [r3, #84]	; 0x54
					handler->int64Buffer = 0;
 8000a80:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000a84:	f04f 0200 	mov.w	r2, #0
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
					handler->uint64Buffer = 0;
 8000a90:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000a94:	f04f 0200 	mov.w	r2, #0
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8000aa0:	e029      	b.n	8000af6 <ModbusReceive+0x22a>
					handler->int32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000aa6:	78db      	ldrb	r3, [r3, #3]
 8000aa8:	061a      	lsls	r2, r3, #24
							(uint32_t)handler->RxData[4]<<16 |
 8000aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000aae:	791b      	ldrb	r3, [r3, #4]
 8000ab0:	041b      	lsls	r3, r3, #16
					handler->int32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000ab2:	431a      	orrs	r2, r3
							(uint32_t)handler->RxData[5]<<8 | (uint32_t)handler->RxData[6];
 8000ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ab8:	795b      	ldrb	r3, [r3, #5]
 8000aba:	021b      	lsls	r3, r3, #8
							(uint32_t)handler->RxData[4]<<16 |
 8000abc:	4313      	orrs	r3, r2
							(uint32_t)handler->RxData[5]<<8 | (uint32_t)handler->RxData[6];
 8000abe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000ac2:	7992      	ldrb	r2, [r2, #6]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	461a      	mov	r2, r3
					handler->int32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000acc:	655a      	str	r2, [r3, #84]	; 0x54
					handler->uint32Buffer = 0;
 8000ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	651a      	str	r2, [r3, #80]	; 0x50
					handler->int64Buffer = 0;
 8000ad6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
					handler->uint64Buffer = 0;
 8000ae6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	f04f 0300 	mov.w	r3, #0
 8000af2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
				for (int i = 3; i<=6; i++) HAL_UART_Transmit(echo_uart, &handler->RxData[i], 1, 100);
 8000af6:	2303      	movs	r3, #3
 8000af8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000afc:	e00f      	b.n	8000b1e <ModbusReceive+0x252>
 8000afe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b06:	18d1      	adds	r1, r2, r3
 8000b08:	2364      	movs	r3, #100	; 0x64
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000b10:	f002 f967 	bl	8002de2 <HAL_UART_Transmit>
 8000b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b18:	3301      	adds	r3, #1
 8000b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	ddeb      	ble.n	8000afe <ModbusReceive+0x232>
}
 8000b26:	e1f5      	b.n	8000f14 <ModbusReceive+0x648>
				HAL_UART_Receive(modbus_uart, handler->RxData, 13, 100); // 100ms timeout
 8000b28:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	220d      	movs	r2, #13
 8000b30:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000b34:	f002 f9db 	bl	8002eee <HAL_UART_Receive>
				if (handler->signedResponseSizeinBits == s_uint64){
 8000b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b3e:	2b40      	cmp	r3, #64	; 0x40
 8000b40:	f040 80e4 	bne.w	8000d0c <ModbusReceive+0x440>
					handler->uint64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b48:	7a9b      	ldrb	r3, [r3, #10]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000b52:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	f04f 0100 	mov.w	r1, #0
 8000b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000b62:	0619      	lsls	r1, r3, #24
 8000b64:	2000      	movs	r0, #0
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b6a:	7a5b      	ldrb	r3, [r3, #9]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000b74:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	f04f 0300 	mov.w	r3, #0
 8000b80:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 8000b84:	0423      	lsls	r3, r4, #16
 8000b86:	2200      	movs	r2, #0
					handler->uint64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000b88:	ea40 0802 	orr.w	r8, r0, r2
 8000b8c:	ea41 0903 	orr.w	r9, r1, r3
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b94:	7a1b      	ldrb	r3, [r3, #8]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000b9e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000ba2:	f04f 0200 	mov.w	r2, #0
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8000bae:	020b      	lsls	r3, r1, #8
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	ea48 0102 	orr.w	r1, r8, r2
 8000bb6:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8000bba:	ea49 0303 	orr.w	r3, r9, r3
 8000bbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bc6:	79db      	ldrb	r3, [r3, #7]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000be0:	000b      	movs	r3, r1
 8000be2:	2200      	movs	r2, #0
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000be4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000be8:	4604      	mov	r4, r0
 8000bea:	4314      	orrs	r4, r2
 8000bec:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8000bf0:	4319      	orrs	r1, r3
 8000bf2:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bfa:	799b      	ldrb	r3, [r3, #6]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000c04:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000c08:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000c14:	460b      	mov	r3, r1
 8000c16:	061b      	lsls	r3, r3, #24
 8000c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c1c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8000c20:	4618      	mov	r0, r3
 8000c22:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8000c26:	460d      	mov	r5, r1
 8000c28:	4328      	orrs	r0, r5
 8000c2a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8000c2e:	4623      	mov	r3, r4
 8000c30:	4313      	orrs	r3, r2
 8000c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c3a:	795b      	ldrb	r3, [r3, #5]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c44:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8000c54:	4629      	mov	r1, r5
 8000c56:	040b      	lsls	r3, r1, #16
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8000c62:	4601      	mov	r1, r0
 8000c64:	040a      	lsls	r2, r1, #16
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000c66:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	4314      	orrs	r4, r2
 8000c6e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8000c72:	4319      	orrs	r1, r3
 8000c74:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c7c:	791b      	ldrb	r3, [r3, #4]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000c86:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000c96:	4629      	mov	r1, r5
 8000c98:	020b      	lsls	r3, r1, #8
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	4629      	mov	r1, r5
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	020a      	lsls	r2, r1, #8
 8000ca8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8000cac:	4604      	mov	r4, r0
 8000cae:	4314      	orrs	r4, r2
 8000cb0:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
							(uint64_t)handler->RxData[3];
 8000cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cbe:	78db      	ldrb	r3, [r3, #3]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8000cc6:	67fa      	str	r2, [r7, #124]	; 0x7c
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000cc8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8000ccc:	4618      	mov	r0, r3
 8000cce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4328      	orrs	r0, r5
 8000cd6:	6738      	str	r0, [r7, #112]	; 0x70
 8000cd8:	4623      	mov	r3, r4
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	677b      	str	r3, [r7, #116]	; 0x74
					handler->uint64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ce2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8000ce6:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
					handler->int32Buffer = 0;
 8000cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	655a      	str	r2, [r3, #84]	; 0x54
					handler->uint32Buffer = 0;
 8000cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	651a      	str	r2, [r3, #80]	; 0x50
					handler->int64Buffer = 0;
 8000cfa:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	f04f 0300 	mov.w	r3, #0
 8000d06:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8000d0a:	e0c1      	b.n	8000e90 <ModbusReceive+0x5c4>
					handler->int64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d10:	7a9b      	ldrb	r3, [r3, #10]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2200      	movs	r2, #0
 8000d16:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	f04f 0100 	mov.w	r1, #0
 8000d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d24:	0619      	lsls	r1, r3, #24
 8000d26:	2000      	movs	r0, #0
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d2c:	7a5b      	ldrb	r3, [r3, #9]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	663b      	str	r3, [r7, #96]	; 0x60
 8000d34:	667a      	str	r2, [r7, #100]	; 0x64
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8000d40:	0433      	lsls	r3, r6, #16
 8000d42:	2200      	movs	r2, #0
					handler->int64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000d44:	ea40 0402 	orr.w	r4, r0, r2
 8000d48:	ea41 0503 	orr.w	r5, r1, r3
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d50:	7a1b      	ldrb	r3, [r3, #8]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2200      	movs	r2, #0
 8000d56:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d58:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d64:	020b      	lsls	r3, r1, #8
 8000d66:	2200      	movs	r2, #0
 8000d68:	ea44 0a02 	orr.w	sl, r4, r2
 8000d6c:	ea45 0b03 	orr.w	fp, r5, r3
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d74:	79db      	ldrb	r3, [r3, #7]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2200      	movs	r2, #0
 8000d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8000d7c:	657a      	str	r2, [r7, #84]	; 0x54
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000d88:	000b      	movs	r3, r1
 8000d8a:	2200      	movs	r2, #0
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000d8c:	ea4a 0102 	orr.w	r1, sl, r2
 8000d90:	64b9      	str	r1, [r7, #72]	; 0x48
 8000d92:	ea4b 0303 	orr.w	r3, fp, r3
 8000d96:	64fb      	str	r3, [r7, #76]	; 0x4c
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d9c:	799b      	ldrb	r3, [r3, #6]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2200      	movs	r2, #0
 8000da2:	643b      	str	r3, [r7, #64]	; 0x40
 8000da4:	647a      	str	r2, [r7, #68]	; 0x44
 8000da6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8000daa:	460b      	mov	r3, r1
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000db0:	460b      	mov	r3, r1
 8000db2:	061b      	lsls	r3, r3, #24
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000db6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000dba:	4618      	mov	r0, r3
 8000dbc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	4328      	orrs	r0, r5
 8000dc4:	6338      	str	r0, [r7, #48]	; 0x30
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000dd0:	795b      	ldrb	r3, [r3, #5]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000de6:	4629      	mov	r1, r5
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4620      	mov	r0, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4604      	mov	r4, r0
 8000df0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8000df4:	4601      	mov	r1, r0
 8000df6:	040a      	lsls	r2, r1, #16
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000df8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4314      	orrs	r4, r2
 8000e00:	623c      	str	r4, [r7, #32]
 8000e02:	4319      	orrs	r1, r3
 8000e04:	6279      	str	r1, [r7, #36]	; 0x24
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	61fa      	str	r2, [r7, #28]
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000e20:	4629      	mov	r1, r5
 8000e22:	020b      	lsls	r3, r1, #8
 8000e24:	4620      	mov	r0, r4
 8000e26:	4629      	mov	r1, r5
 8000e28:	4604      	mov	r4, r0
 8000e2a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8000e2e:	4601      	mov	r1, r0
 8000e30:	020a      	lsls	r2, r1, #8
 8000e32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e36:	4604      	mov	r4, r0
 8000e38:	4314      	orrs	r4, r2
 8000e3a:	613c      	str	r4, [r7, #16]
 8000e3c:	4319      	orrs	r1, r3
 8000e3e:	6179      	str	r1, [r7, #20]
							(uint64_t)handler->RxData[3];
 8000e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	60fa      	str	r2, [r7, #12]
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000e4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000e52:	4618      	mov	r0, r3
 8000e54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000e58:	460d      	mov	r5, r1
 8000e5a:	4328      	orrs	r0, r5
 8000e5c:	6038      	str	r0, [r7, #0]
 8000e5e:	4623      	mov	r3, r4
 8000e60:	4313      	orrs	r3, r2
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	e9d7 2300 	ldrd	r2, r3, [r7]
					handler->int64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000e68:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000e6c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
					handler->int32Buffer = 0;
 8000e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e74:	2200      	movs	r2, #0
 8000e76:	655a      	str	r2, [r3, #84]	; 0x54
					handler->uint32Buffer = 0;
 8000e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	651a      	str	r2, [r3, #80]	; 0x50
					handler->uint64Buffer = 0;
 8000e80:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
				for (int i = 10; i>=3; i--) HAL_UART_Transmit(echo_uart, &handler->RxData[i], 1, 100);
 8000e90:	230a      	movs	r3, #10
 8000e92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000e96:	e00f      	b.n	8000eb8 <ModbusReceive+0x5ec>
 8000e98:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000e9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ea0:	18d1      	adds	r1, r2, r3
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000eaa:	f001 ff9a 	bl	8002de2 <HAL_UART_Transmit>
 8000eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000eb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	dceb      	bgt.n	8000e98 <ModbusReceive+0x5cc>
}
 8000ec0:	e028      	b.n	8000f14 <ModbusReceive+0x648>
		HAL_UART_Receive(modbus_uart, handler->RxData, 8, 100); // 100ms timeout
 8000ec2:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000ec6:	2364      	movs	r3, #100	; 0x64
 8000ec8:	2208      	movs	r2, #8
 8000eca:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000ece:	f002 f80e 	bl	8002eee <HAL_UART_Receive>
		handler->int16Buffer[0] = handler->RxData[4]<<8 | handler->RxData[5];
 8000ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ee0:	795b      	ldrb	r3, [r3, #5]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000eee:	861a      	strh	r2, [r3, #48]	; 0x30
		HAL_UART_Transmit(echo_uart, &handler->RxData[4], 1, 100);
 8000ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ef4:	1d19      	adds	r1, r3, #4
 8000ef6:	2364      	movs	r3, #100	; 0x64
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000efe:	f001 ff70 	bl	8002de2 <HAL_UART_Transmit>
		HAL_UART_Transmit(echo_uart, &handler->RxData[5], 1, 100);
 8000f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f06:	1d59      	adds	r1, r3, #5
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000f10:	f001 ff67 	bl	8002de2 <HAL_UART_Transmit>
}
 8000f14:	bf00      	nop
 8000f16:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f20 <ForwardVolume_ui32>:
	ReadNRegs(handler, modbus_uart, 1, s_int16);

	ModbusReceive(handler, echo_uart, modbus_uart);
}

void ForwardVolume_ui32(struct ModbusHandler *handler, UART_HandleTypeDef *echo_uart, UART_HandleTypeDef *modbus_uart){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	handler->LastUsed = FORWARDVOLUME_UI32;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2238      	movs	r2, #56	; 0x38
 8000f30:	669a      	str	r2, [r3, #104]	; 0x68

	handler->TxData[3] = 0x36; // register address low
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2236      	movs	r2, #54	; 0x36
 8000f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	ReadNRegs(handler, modbus_uart, 1, s_uint32);
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fc6d 	bl	8000820 <ReadNRegs>

	ModbusReceive(handler, echo_uart, modbus_uart);
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff fcbe 	bl	80008cc <ModbusReceive>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <LL_AHB2_GRP1_EnableClock>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fac:	68fb      	ldr	r3, [r7, #12]
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b096      	sub	sp, #88	; 0x58
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2238      	movs	r2, #56	; 0x38
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fd7f 	bl	8003b18 <memset>
  if(huart->Instance==USART1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a2d      	ldr	r2, [pc, #180]	; (80010d4 <HAL_UART_MspInit+0xe0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d126      	bne.n	8001072 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001024:	2301      	movs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001028:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800102c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fd4a 	bl	8002acc <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800103e:	f7ff fbb3 	bl	80007a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001042:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001046:	f7ff ffb7 	bl	8000fb8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff ff84 	bl	8000f58 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001050:	23c0      	movs	r3, #192	; 0xc0
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001060:	2307      	movs	r3, #7
 8001062:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001068:	4619      	mov	r1, r3
 800106a:	481b      	ldr	r0, [pc, #108]	; (80010d8 <HAL_UART_MspInit+0xe4>)
 800106c:	f000 f9e8 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001070:	e02b      	b.n	80010ca <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_UART_MspInit+0xe8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d126      	bne.n	80010ca <HAL_UART_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800107c:	2302      	movs	r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001080:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001084:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fd1e 	bl	8002acc <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_UART_MspInit+0xa6>
      Error_Handler();
 8001096:	f7ff fb87 	bl	80007a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800109a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800109e:	f7ff ff73 	bl	8000f88 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff ff58 	bl	8000f58 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80010a8:	230c      	movs	r3, #12
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b8:	2307      	movs	r3, #7
 80010ba:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f000 f9bb 	bl	8001440 <HAL_GPIO_Init>
}
 80010ca:	bf00      	nop
 80010cc:	3758      	adds	r7, #88	; 0x58
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40013800 	.word	0x40013800
 80010d8:	48000400 	.word	0x48000400
 80010dc:	40004400 	.word	0x40004400

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f88d 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
	...

0800113c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001140:	f7ff fff5 	bl	800112e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <LoopForever+0x6>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	; (800117c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <LoopForever+0xe>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <LoopForever+0x12>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	; (8001188 <LoopForever+0x16>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800116a:	f002 fcb1 	bl	8003ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116e:	f7ff f9b3 	bl	80004d8 <main>

08001172 <LoopForever>:

LoopForever:
    b LoopForever
 8001172:	e7fe      	b.n	8001172 <LoopForever>
  ldr   r0, =_estack
 8001174:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001180:	08003e34 	.word	0x08003e34
  ldr r2, =_sbss
 8001184:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001188:	20000154 	.word	0x20000154

0800118c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119a:	2003      	movs	r0, #3
 800119c:	f000 f91e 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011a0:	f001 fab6 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <HAL_Init+0x3c>)
 80011a8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f810 	bl	80011d0 <HAL_InitTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e001      	b.n	80011c0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011bc:	f7ff ff14 	bl	8000fe8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000000 	.word	0x20000000

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_InitTick+0x6c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d024      	beq.n	800122e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e4:	f001 fa94 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 80011e8:	4602      	mov	r2, r0
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_InitTick+0x6c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f912 	bl	8001426 <HAL_SYSTICK_Config>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10f      	bne.n	8001228 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d809      	bhi.n	8001222 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120e:	2200      	movs	r2, #0
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	f04f 30ff 	mov.w	r0, #4294967295
 8001216:	f000 f8ec 	bl	80013f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <HAL_InitTick+0x70>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e007      	b.n	8001232 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e004      	b.n	8001232 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e001      	b.n	8001232 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000008 	.word	0x20000008
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x1c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x20>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_IncTick+0x20>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	20000008 	.word	0x20000008
 8001264:	20000150 	.word	0x20000150

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b02      	ldr	r3, [pc, #8]	; (8001278 <HAL_GetTick+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000150 	.word	0x20000150

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff90 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff49 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff60 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff92 	bl	8001334 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff61 	bl	80012e0 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffb2 	bl	8001398 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e140      	b.n	80016d2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8132 	beq.w	80016cc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d005      	beq.n	8001480 <HAL_GPIO_Init+0x40>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d130      	bne.n	80014e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b6:	2201      	movs	r2, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f003 0201 	and.w	r2, r3, #1
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d017      	beq.n	800151e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d123      	bne.n	8001572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	08da      	lsrs	r2, r3, #3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3208      	adds	r2, #8
 800156c:	6939      	ldr	r1, [r7, #16]
 800156e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0203 	and.w	r2, r3, #3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 808c 	beq.w	80016cc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015b4:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	2207      	movs	r2, #7
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015de:	d00d      	beq.n	80015fc <HAL_GPIO_Init+0x1bc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a44      	ldr	r2, [pc, #272]	; (80016f4 <HAL_GPIO_Init+0x2b4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d007      	beq.n	80015f8 <HAL_GPIO_Init+0x1b8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a43      	ldr	r2, [pc, #268]	; (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d101      	bne.n	80015f4 <HAL_GPIO_Init+0x1b4>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e004      	b.n	80015fe <HAL_GPIO_Init+0x1be>
 80015f4:	2307      	movs	r3, #7
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_Init+0x1be>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_GPIO_Init+0x1be>
 80015fc:	2300      	movs	r3, #0
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	f002 0203 	and.w	r2, r2, #3
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	4093      	lsls	r3, r2
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800160e:	4938      	ldr	r1, [pc, #224]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001640:	4a2e      	ldr	r2, [pc, #184]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800166a:	4a24      	ldr	r2, [pc, #144]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 8001672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001676:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001696:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 80016a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016a4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f47f aeb7 	bne.w	8001450 <HAL_GPIO_Init+0x10>
  }
}
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40010000 	.word	0x40010000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	48000800 	.word	0x48000800
 80016fc:	58000800 	.word	0x58000800

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800171c:	e002      	b.n	8001724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
	...

08001730 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_PWR_EnableBkUpAccess+0x18>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	58000400 	.word	0x58000400

0800174c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_PWREx_GetVoltageRange+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	58000400 	.word	0x58000400

08001764 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001774:	d101      	bne.n	800177a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	58000400 	.word	0x58000400

08001788 <LL_RCC_HSE_EnableTcxo>:
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <LL_RCC_HSE_DisableTcxo>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017d2:	d101      	bne.n	80017d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <LL_RCC_HSE_Enable>:
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <LL_RCC_HSE_Disable>:
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <LL_RCC_HSE_IsReady>:
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800182c:	d101      	bne.n	8001832 <LL_RCC_HSE_IsReady+0x18>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <LL_RCC_HSE_IsReady+0x1a>
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <LL_RCC_HSI_Enable>:
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <LL_RCC_HSI_Disable>:
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <LL_RCC_HSI_IsReady>:
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d101      	bne.n	800188c <LL_RCC_HSI_IsReady+0x18>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <LL_RCC_HSI_IsReady+0x1a>
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	061b      	lsls	r3, r3, #24
 80018ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d101      	bne.n	80018d6 <LL_RCC_LSE_IsReady+0x18>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <LL_RCC_LSE_IsReady+0x1a>
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b02      	cmp	r3, #2
 8001932:	d101      	bne.n	8001938 <LL_RCC_LSI_IsReady+0x18>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <LL_RCC_LSI_IsReady+0x1a>
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6013      	str	r3, [r2, #0]
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b02      	cmp	r3, #2
 800198a:	d101      	bne.n	8001990 <LL_RCC_MSI_IsReady+0x16>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <LL_RCC_MSI_IsReady+0x18>
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d101      	bne.n	80019b0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a82:	f023 020f 	bic.w	r2, r3, #15
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b58:	6013      	str	r3, [r2, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b90:	d101      	bne.n	8001b96 <LL_RCC_PLL_IsReady+0x18>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_RCC_PLL_IsReady+0x1a>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0303 	and.w	r3, r3, #3
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0c:	d101      	bne.n	8001c12 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d101      	bne.n	8001c36 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c52:	d101      	bne.n	8001c58 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c74:	d101      	bne.n	8001c7a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e36f      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	f7ff fece 	bl	8001a36 <LL_RCC_GetSysClkSource>
 8001c9a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c9c:	f7ff ffa2 	bl	8001be4 <LL_RCC_PLL_GetMainSource>
 8001ca0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80c4 	beq.w	8001e38 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x3e>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	d176      	bne.n	8001daa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d173      	bne.n	8001daa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e353      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_OscConfig+0x68>
 8001ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cea:	e006      	b.n	8001cfa <HAL_RCC_OscConfig+0x76>
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d222      	bcs.n	8001d44 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fd3c 	bl	8002780 <RCC_SetFlashLatencyFromMSIRange>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e331      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fe53 	bl	80019e8 <LL_RCC_MSI_SetCalibTrimming>
 8001d42:	e021      	b.n	8001d88 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fe3a 	bl	80019e8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fd01 	bl	8002780 <RCC_SetFlashLatencyFromMSIRange>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e2f6      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d88:	f000 fcc2 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4aa7      	ldr	r2, [pc, #668]	; (800202c <HAL_RCC_OscConfig+0x3a8>)
 8001d90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001d92:	4ba7      	ldr	r3, [pc, #668]	; (8002030 <HAL_RCC_OscConfig+0x3ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fa1a 	bl	80011d0 <HAL_InitTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001da0:	7cfb      	ldrb	r3, [r7, #19]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d047      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001da6:	7cfb      	ldrb	r3, [r7, #19]
 8001da8:	e2e5      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001db2:	f7ff fdc6 	bl	8001942 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fa57 	bl	8001268 <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fa53 	bl	8001268 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e2d2      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001dd0:	f7ff fdd3 	bl	800197a <LL_RCC_MSI_IsReady>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f1      	beq.n	8001dbe <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fdef 	bl	80019e8 <LL_RCC_MSI_SetCalibTrimming>
 8001e0a:	e015      	b.n	8001e38 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e0c:	f7ff fda7 	bl	800195e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fa2a 	bl	8001268 <HAL_GetTick>
 8001e14:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e18:	f7ff fa26 	bl	8001268 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e2a5      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e2a:	f7ff fda6 	bl	800197a <LL_RCC_MSI_IsReady>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f1      	bne.n	8001e18 <HAL_RCC_OscConfig+0x194>
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e36:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d058      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d108      	bne.n	8001e62 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d105      	bne.n	8001e62 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d14b      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e289      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0x204>
 8001e82:	f7ff fcae 	bl	80017e2 <LL_RCC_HSE_Enable>
 8001e86:	e00d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x220>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001e90:	d104      	bne.n	8001e9c <HAL_RCC_OscConfig+0x218>
 8001e92:	f7ff fc79 	bl	8001788 <LL_RCC_HSE_EnableTcxo>
 8001e96:	f7ff fca4 	bl	80017e2 <LL_RCC_HSE_Enable>
 8001e9a:	e003      	b.n	8001ea4 <HAL_RCC_OscConfig+0x220>
 8001e9c:	f7ff fcaf 	bl	80017fe <LL_RCC_HSE_Disable>
 8001ea0:	f7ff fc80 	bl	80017a4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d012      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff f9dc 	bl	8001268 <HAL_GetTick>
 8001eb0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff f9d8 	bl	8001268 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e257      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ec6:	f7ff fca8 	bl	800181a <LL_RCC_HSE_IsReady>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f1      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x230>
 8001ed0:	e011      	b.n	8001ef6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f9c9 	bl	8001268 <HAL_GetTick>
 8001ed6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eda:	f7ff f9c5 	bl	8001268 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e244      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001eec:	f7ff fc95 	bl	800181a <LL_RCC_HSE_IsReady>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f1      	bne.n	8001eda <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d046      	beq.n	8001f90 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_OscConfig+0x290>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d10e      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e22a      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fcb6 	bl	8001896 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f2a:	e031      	b.n	8001f90 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d019      	beq.n	8001f68 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	f7ff fc82 	bl	800183c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff f996 	bl	8001268 <HAL_GetTick>
 8001f3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff f992 	bl	8001268 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e211      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f52:	f7ff fc8f 	bl	8001874 <LL_RCC_HSI_IsReady>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f1      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fc98 	bl	8001896 <LL_RCC_HSI_SetCalibTrimming>
 8001f66:	e013      	b.n	8001f90 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f68:	f7ff fc76 	bl	8001858 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff f97c 	bl	8001268 <HAL_GetTick>
 8001f70:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f74:	f7ff f978 	bl	8001268 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e1f7      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f86:	f7ff fc75 	bl	8001874 <LL_RCC_HSI_IsReady>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f1      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d06e      	beq.n	800207a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d056      	beq.n	8002052 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fac:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d031      	beq.n	8002020 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e1d0      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d013      	beq.n	8002006 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001fde:	f7ff fc8f 	bl	8001900 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fe2:	f7ff f941 	bl	8001268 <HAL_GetTick>
 8001fe6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff f93d 	bl	8001268 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b11      	cmp	r3, #17
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1bc      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ffc:	f7ff fc90 	bl	8001920 <LL_RCC_LSI_IsReady>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f1      	bne.n	8001fea <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200e:	f023 0210 	bic.w	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002020:	f7ff fc5e 	bl	80018e0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7ff f920 	bl	8001268 <HAL_GetTick>
 8002028:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800202a:	e00c      	b.n	8002046 <HAL_RCC_OscConfig+0x3c2>
 800202c:	20000000 	.word	0x20000000
 8002030:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7ff f918 	bl	8001268 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b11      	cmp	r3, #17
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e197      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002046:	f7ff fc6b 	bl	8001920 <LL_RCC_LSI_IsReady>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f1      	beq.n	8002034 <HAL_RCC_OscConfig+0x3b0>
 8002050:	e013      	b.n	800207a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002052:	f7ff fc55 	bl	8001900 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7ff f907 	bl	8001268 <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205e:	f7ff f903 	bl	8001268 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b11      	cmp	r3, #17
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e182      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002070:	f7ff fc56 	bl	8001920 <LL_RCC_LSI_IsReady>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f1      	bne.n	800205e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80d8 	beq.w	8002238 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002088:	f7ff fb6c 	bl	8001764 <LL_PWR_IsEnabledBkUpAccess>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d113      	bne.n	80020ba <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002092:	f7ff fb4d 	bl	8001730 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002096:	f7ff f8e7 	bl	8001268 <HAL_GetTick>
 800209a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209e:	f7ff f8e3 	bl	8001268 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e162      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80020b0:	f7ff fb58 	bl	8001764 <LL_PWR_IsEnabledBkUpAccess>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f1      	beq.n	800209e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d07b      	beq.n	80021ba <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b85      	cmp	r3, #133	; 0x85
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7ff f8bf 	bl	8001268 <HAL_GetTick>
 80020ea:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff f8b1 	bl	8001268 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e12e      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002118:	f7ff fbd1 	bl	80018be <LL_RCC_LSE_IsReady>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ef      	beq.n	8002102 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b81      	cmp	r3, #129	; 0x81
 8002128:	d003      	beq.n	8002132 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b85      	cmp	r3, #133	; 0x85
 8002130:	d121      	bne.n	8002176 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff f899 	bl	8001268 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff f88b 	bl	8001268 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e108      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ec      	beq.n	800214e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002174:	e060      	b.n	8002238 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7ff f877 	bl	8001268 <HAL_GetTick>
 800217a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff f869 	bl	8001268 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0e6      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ec      	bne.n	8002192 <HAL_RCC_OscConfig+0x50e>
 80021b8:	e03e      	b.n	8002238 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff f855 	bl	8001268 <HAL_GetTick>
 80021be:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff f847 	bl	8001268 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0c4      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ec      	bne.n	80021d6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fc:	f7ff f834 	bl	8001268 <HAL_GetTick>
 8002200:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7ff f826 	bl	8001268 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0a3      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800222e:	f7ff fb46 	bl	80018be <LL_RCC_LSE_IsReady>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ef      	bne.n	8002218 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8099 	beq.w	8002374 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d06c      	beq.n	8002322 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	2b02      	cmp	r3, #2
 800224e:	d14b      	bne.n	80022e8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	f7ff fc87 	bl	8001b62 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7ff f808 	bl	8001268 <HAL_GetTick>
 8002258:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff f804 	bl	8001268 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b0a      	cmp	r3, #10
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e083      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800226e:	f7ff fc86 	bl	8001b7e <LL_RCC_PLL_IsReady>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f1      	bne.n	800225c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	4b40      	ldr	r3, [pc, #256]	; (8002380 <HAL_RCC_OscConfig+0x6fc>)
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002290:	0212      	lsls	r2, r2, #8
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022a4:	430a      	orrs	r2, r1
 80022a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ae:	f7ff fc4a 	bl	8001b46 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe ffd1 	bl	8001268 <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe ffcd 	bl	8001268 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b0a      	cmp	r3, #10
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e04c      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80022dc:	f7ff fc4f 	bl	8001b7e <LL_RCC_PLL_IsReady>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f1      	beq.n	80022ca <HAL_RCC_OscConfig+0x646>
 80022e6:	e045      	b.n	8002374 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	f7ff fc3b 	bl	8001b62 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe ffbc 	bl	8001268 <HAL_GetTick>
 80022f0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe ffb8 	bl	8001268 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b0a      	cmp	r3, #10
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e037      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002306:	f7ff fc3a 	bl	8001b7e <LL_RCC_PLL_IsReady>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f1      	bne.n	80022f4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231a:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_RCC_OscConfig+0x700>)
 800231c:	4013      	ands	r3, r2
 800231e:	60cb      	str	r3, [r1, #12]
 8002320:	e028      	b.n	8002374 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e023      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	429a      	cmp	r2, r3
 8002342:	d115      	bne.n	8002370 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	429a      	cmp	r2, r3
 8002350:	d10e      	bne.n	8002370 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	11c1808c 	.word	0x11c1808c
 8002384:	eefefffc 	.word	0xeefefffc

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e10f      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b89      	ldr	r3, [pc, #548]	; (80025c4 <HAL_RCC_ClockConfig+0x23c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d91b      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b86      	ldr	r3, [pc, #536]	; (80025c4 <HAL_RCC_ClockConfig+0x23c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	4984      	ldr	r1, [pc, #528]	; (80025c4 <HAL_RCC_ClockConfig+0x23c>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ba:	f7fe ff55 	bl	8001268 <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023c2:	f7fe ff51 	bl	8001268 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0f3      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d4:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <HAL_RCC_ClockConfig+0x23c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d1ef      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d016      	beq.n	800241c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fb2a 	bl	8001a4c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023f8:	f7fe ff36 	bl	8001268 <HAL_GetTick>
 80023fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002400:	f7fe ff32 	bl	8001268 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e0d4      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002412:	f7ff fbf2 	bl	8001bfa <LL_RCC_IsActiveFlag_HPRE>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f1      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002424:	2b00      	cmp	r3, #0
 8002426:	d016      	beq.n	8002456 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fb20 	bl	8001a72 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002432:	f7fe ff19 	bl	8001268 <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800243a:	f7fe ff15 	bl	8001268 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0b7      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800244c:	f7ff fbe6 	bl	8001c1c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f1      	beq.n	800243a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d016      	beq.n	8002490 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fb19 	bl	8001a9e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800246c:	f7fe fefc 	bl	8001268 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002474:	f7fe fef8 	bl	8001268 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e09a      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002486:	f7ff fbdb 	bl	8001c40 <LL_RCC_IsActiveFlag_PPRE1>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f1      	beq.n	8002474 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d017      	beq.n	80024cc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fb0e 	bl	8001ac4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fede 	bl	8001268 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024b0:	f7fe feda 	bl	8001268 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e07c      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024c2:	f7ff fbce 	bl	8001c62 <LL_RCC_IsActiveFlag_PPRE2>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f1      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d043      	beq.n	8002560 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d106      	bne.n	80024ee <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80024e0:	f7ff f99b 	bl	800181a <LL_RCC_HSE_IsReady>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11e      	bne.n	8002528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e066      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80024f6:	f7ff fb42 	bl	8001b7e <LL_RCC_PLL_IsReady>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d113      	bne.n	8002528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e05b      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800250c:	f7ff fa35 	bl	800197a <LL_RCC_MSI_IsReady>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d108      	bne.n	8002528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e050      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800251a:	f7ff f9ab 	bl	8001874 <LL_RCC_HSI_IsReady>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e049      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fa6f 	bl	8001a10 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002532:	f7fe fe99 	bl	8001268 <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002538:	e00a      	b.n	8002550 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253a:	f7fe fe95 	bl	8001268 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e035      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002550:	f7ff fa71 	bl	8001a36 <LL_RCC_GetSysClkSource>
 8002554:	4602      	mov	r2, r0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1ec      	bne.n	800253a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_RCC_ClockConfig+0x23c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d21b      	bcs.n	80025a6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_RCC_ClockConfig+0x23c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4913      	ldr	r1, [pc, #76]	; (80025c4 <HAL_RCC_ClockConfig+0x23c>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800257e:	f7fe fe73 	bl	8001268 <HAL_GetTick>
 8002582:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002584:	e008      	b.n	8002598 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002586:	f7fe fe6f 	bl	8001268 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e011      	b.n	80025bc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_ClockConfig+0x23c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d1ef      	bne.n	8002586 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025a6:	f000 f8b3 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_RCC_ClockConfig+0x240>)
 80025ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_ClockConfig+0x244>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fe0b 	bl	80011d0 <HAL_InitTick>
 80025ba:	4603      	mov	r3, r0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	58004000 	.word	0x58004000
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000004 	.word	0x20000004

080025d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025de:	f7ff fa2a 	bl	8001a36 <LL_RCC_GetSysClkSource>
 80025e2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e4:	f7ff fafe 	bl	8001be4 <LL_RCC_PLL_GetMainSource>
 80025e8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x2c>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b0c      	cmp	r3, #12
 80025f4:	d139      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d136      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80025fc:	f7ff f9cd 	bl	800199a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x62>
 8002606:	f7ff f9c8 	bl	800199a <LL_RCC_MSI_IsEnabledRangeSelect>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d106      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0x4e>
 8002610:	f7ff f9d3 	bl	80019ba <LL_RCC_MSI_GetRange>
 8002614:	4603      	mov	r3, r0
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	e005      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x5a>
 800261e:	f7ff f9d7 	bl	80019d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002622:	4603      	mov	r3, r0
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	4a36      	ldr	r2, [pc, #216]	; (8002704 <HAL_RCC_GetSysClockFreq+0x134>)
 800262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002630:	e014      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x8c>
 8002632:	f7ff f9b2 	bl	800199a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x7a>
 800263c:	f7ff f9bd 	bl	80019ba <LL_RCC_MSI_GetRange>
 8002640:	4603      	mov	r3, r0
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	e005      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x86>
 800264a:	f7ff f9c1 	bl	80019d0 <LL_RCC_MSI_GetRangeAfterStandby>
 800264e:	4603      	mov	r3, r0
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	4a2b      	ldr	r2, [pc, #172]	; (8002704 <HAL_RCC_GetSysClockFreq+0x134>)
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d115      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002668:	e012      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d102      	bne.n	8002676 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_RCC_GetSysClockFreq+0x138>)
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e00c      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b08      	cmp	r3, #8
 800267a:	d109      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800267c:	f7ff f8a0 	bl	80017c0 <LL_RCC_HSE_IsEnabledDiv2>
 8002680:	4603      	mov	r3, r0
 8002682:	2b01      	cmp	r3, #1
 8002684:	d102      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_RCC_GetSysClockFreq+0x138>)
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e001      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b1f      	ldr	r3, [pc, #124]	; (800270c <HAL_RCC_GetSysClockFreq+0x13c>)
 800268e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002690:	f7ff f9d1 	bl	8001a36 <LL_RCC_GetSysClkSource>
 8002694:	4603      	mov	r3, r0
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d12f      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800269a:	f7ff faa3 	bl	8001be4 <LL_RCC_PLL_GetMainSource>
 800269e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0xde>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d003      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xe4>
 80026ac:	e00d      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_RCC_GetSysClockFreq+0x138>)
 80026b0:	60fb      	str	r3, [r7, #12]
        break;
 80026b2:	e00d      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026b4:	f7ff f884 	bl	80017c0 <LL_RCC_HSE_IsEnabledDiv2>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_GetSysClockFreq+0x138>)
 80026c0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_RCC_GetSysClockFreq+0x13c>)
 80026c6:	60fb      	str	r3, [r7, #12]
        break;
 80026c8:	e002      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	60fb      	str	r3, [r7, #12]
        break;
 80026ce:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80026d0:	f7ff fa66 	bl	8001ba0 <LL_RCC_PLL_GetN>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	fb03 f402 	mul.w	r4, r3, r2
 80026dc:	f7ff fa77 	bl	8001bce <LL_RCC_PLL_GetDivider>
 80026e0:	4603      	mov	r3, r0
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	3301      	adds	r3, #1
 80026e6:	fbb4 f4f3 	udiv	r4, r4, r3
 80026ea:	f7ff fa65 	bl	8001bb8 <LL_RCC_PLL_GetR>
 80026ee:	4603      	mov	r3, r0
 80026f0:	0f5b      	lsrs	r3, r3, #29
 80026f2:	3301      	adds	r3, #1
 80026f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80026f8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80026fa:	697b      	ldr	r3, [r7, #20]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}
 8002704:	08003dbc 	.word	0x08003dbc
 8002708:	00f42400 	.word	0x00f42400
 800270c:	01e84800 	.word	0x01e84800

08002710 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002710:	b598      	push	{r3, r4, r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002714:	f7ff ff5c 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 8002718:	4604      	mov	r4, r0
 800271a:	f7ff f9e6 	bl	8001aea <LL_RCC_GetAHBPrescaler>
 800271e:	4603      	mov	r3, r0
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	4a03      	ldr	r2, [pc, #12]	; (8002734 <HAL_RCC_GetHCLKFreq+0x24>)
 8002728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd98      	pop	{r3, r4, r7, pc}
 8002734:	08003d5c 	.word	0x08003d5c

08002738 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002738:	b598      	push	{r3, r4, r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800273c:	f7ff ffe8 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002740:	4604      	mov	r4, r0
 8002742:	f7ff f9ea 	bl	8001b1a <LL_RCC_GetAPB1Prescaler>
 8002746:	4603      	mov	r3, r0
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	4a03      	ldr	r2, [pc, #12]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x20>)
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd98      	pop	{r3, r4, r7, pc}
 8002758:	08003d9c 	.word	0x08003d9c

0800275c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800275c:	b598      	push	{r3, r4, r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002760:	f7ff ffd6 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 8002764:	4604      	mov	r4, r0
 8002766:	f7ff f9e3 	bl	8001b30 <LL_RCC_GetAPB2Prescaler>
 800276a:	4603      	mov	r3, r0
 800276c:	0adb      	lsrs	r3, r3, #11
 800276e:	4a03      	ldr	r2, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd98      	pop	{r3, r4, r7, pc}
 800277c:	08003d9c 	.word	0x08003d9c

08002780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002798:	f7ff f9b2 	bl	8001b00 <LL_RCC_GetAHB3Prescaler>
 800279c:	4603      	mov	r3, r0
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80027a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0c9c      	lsrs	r4, r3, #18
 80027bc:	f7fe ffc6 	bl	800174c <HAL_PWREx_GetVoltageRange>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4619      	mov	r1, r3
 80027c4:	4620      	mov	r0, r4
 80027c6:	f000 f80b 	bl	80027e0 <RCC_SetFlashLatency>
 80027ca:	4603      	mov	r3, r0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	08003dbc 	.word	0x08003dbc
 80027d8:	08003d5c 	.word	0x08003d5c
 80027dc:	431bde83 	.word	0x431bde83

080027e0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08e      	sub	sp, #56	; 0x38
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80027ea:	4a3a      	ldr	r2, [pc, #232]	; (80028d4 <RCC_SetFlashLatency+0xf4>)
 80027ec:	f107 0320 	add.w	r3, r7, #32
 80027f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f4:	6018      	str	r0, [r3, #0]
 80027f6:	3304      	adds	r3, #4
 80027f8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80027fa:	4a37      	ldr	r2, [pc, #220]	; (80028d8 <RCC_SetFlashLatency+0xf8>)
 80027fc:	f107 0318 	add.w	r3, r7, #24
 8002800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002804:	6018      	str	r0, [r3, #0]
 8002806:	3304      	adds	r3, #4
 8002808:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800280a:	4a34      	ldr	r2, [pc, #208]	; (80028dc <RCC_SetFlashLatency+0xfc>)
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	ca07      	ldmia	r2, {r0, r1, r2}
 8002812:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002816:	2300      	movs	r3, #0
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002820:	d11b      	bne.n	800285a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002822:	2300      	movs	r3, #0
 8002824:	633b      	str	r3, [r7, #48]	; 0x30
 8002826:	e014      	b.n	8002852 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	3338      	adds	r3, #56	; 0x38
 800282e:	443b      	add	r3, r7
 8002830:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002834:	461a      	mov	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4293      	cmp	r3, r2
 800283a:	d807      	bhi.n	800284c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	3338      	adds	r3, #56	; 0x38
 8002842:	443b      	add	r3, r7
 8002844:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800284a:	e021      	b.n	8002890 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	3301      	adds	r3, #1
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	2b02      	cmp	r3, #2
 8002856:	d9e7      	bls.n	8002828 <RCC_SetFlashLatency+0x48>
 8002858:	e01a      	b.n	8002890 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800285a:	2300      	movs	r3, #0
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285e:	e014      	b.n	800288a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	3338      	adds	r3, #56	; 0x38
 8002866:	443b      	add	r3, r7
 8002868:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4293      	cmp	r3, r2
 8002872:	d807      	bhi.n	8002884 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	3338      	adds	r3, #56	; 0x38
 800287a:	443b      	add	r3, r7
 800287c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002880:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002882:	e005      	b.n	8002890 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	3301      	adds	r3, #1
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2b02      	cmp	r3, #2
 800288e:	d9e7      	bls.n	8002860 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <RCC_SetFlashLatency+0x100>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 0207 	bic.w	r2, r3, #7
 8002898:	4911      	ldr	r1, [pc, #68]	; (80028e0 <RCC_SetFlashLatency+0x100>)
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80028a0:	f7fe fce2 	bl	8001268 <HAL_GetTick>
 80028a4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80028a6:	e008      	b.n	80028ba <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028a8:	f7fe fcde 	bl	8001268 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e007      	b.n	80028ca <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <RCC_SetFlashLatency+0x100>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1ef      	bne.n	80028a8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3738      	adds	r7, #56	; 0x38
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	08003b40 	.word	0x08003b40
 80028d8:	08003b48 	.word	0x08003b48
 80028dc:	08003b50 	.word	0x08003b50
 80028e0:	58004000 	.word	0x58004000

080028e4 <LL_RCC_LSE_IsReady>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d101      	bne.n	80028fc <LL_RCC_LSE_IsReady+0x18>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <LL_RCC_LSE_IsReady+0x1a>
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <LL_RCC_SetUSARTClockSource>:
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	43db      	mvns	r3, r3
 800291c:	401a      	ands	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <LL_RCC_SetI2SClockSource>:
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <LL_RCC_SetLPUARTClockSource>:
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <LL_RCC_SetI2CClockSource>:
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002996:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029a2:	43db      	mvns	r3, r3
 80029a4:	401a      	ands	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_SetLPTIMClockSource>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_SetRNGClockSource>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <LL_RCC_SetADCClockSource>:
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <LL_RCC_SetRTCClockSource>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <LL_RCC_GetRTCClockSource>:
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <LL_RCC_ForceBackupDomainReset>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_RCC_ReleaseBackupDomainReset>:
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002ad8:	2300      	movs	r3, #0
 8002ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002adc:	2300      	movs	r3, #0
 8002ade:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d058      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002aec:	f7fe fe20 	bl	8001730 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af0:	f7fe fbba 	bl	8001268 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002af6:	e009      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe fbb6 	bl	8001268 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	74fb      	strb	r3, [r7, #19]
        break;
 8002b0a:	e006      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002b0c:	4b7b      	ldr	r3, [pc, #492]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b18:	d1ee      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d13c      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002b20:	f7ff ffa7 	bl	8002a72 <LL_RCC_GetRTCClockSource>
 8002b24:	4602      	mov	r2, r0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d00f      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b3c:	f7ff ffa5 	bl	8002a8a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b40:	f7ff ffb3 	bl	8002aaa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d014      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fb86 	bl	8001268 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe fb82 	bl	8001268 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d902      	bls.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	74fb      	strb	r3, [r7, #19]
            break;
 8002b76:	e004      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002b78:	f7ff feb4 	bl	80028e4 <LL_RCC_LSE_IsReady>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d1ee      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff5b 	bl	8002a48 <LL_RCC_SetRTCClockSource>
 8002b92:	e004      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	74bb      	strb	r3, [r7, #18]
 8002b98:	e001      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fea9 	bl	8002906 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe9e 	bl	8002906 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fec0 	bl	8002960 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fee6 	bl	80029c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fedb 	bl	80029c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d004      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fed0 	bl	80029c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fea9 	bl	800298a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fe9e 	bl	800298a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fe93 	bl	800298a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d011      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fe5e 	bl	8002936 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c82:	d107      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fea5 	bl	80029f4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d011      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fea3 	bl	8002a1e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002cf2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	58000400 	.word	0x58000400

08002d00 <LL_RCC_GetUSARTClockSource>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	401a      	ands	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	4313      	orrs	r3, r2
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_GetLPUARTClockSource>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4013      	ands	r3, r2
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e042      	b.n	8002dda <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe f944 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f977 	bl	8003078 <UART_SetConfig>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e022      	b.n	8002dda <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fbdf 	bl	8003560 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002db0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fc65 	bl	80036a2 <UART_CheckIdleState>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b08a      	sub	sp, #40	; 0x28
 8002de6:	af02      	add	r7, sp, #8
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d173      	bne.n	8002ee4 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_UART_Transmit+0x26>
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e06c      	b.n	8002ee6 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2221      	movs	r2, #33	; 0x21
 8002e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fa24 	bl	8001268 <HAL_GetTick>
 8002e20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	88fa      	ldrh	r2, [r7, #6]
 8002e26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d108      	bne.n	8002e4e <HAL_UART_Transmit+0x6c>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d104      	bne.n	8002e4e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	e003      	b.n	8002e56 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e56:	e02c      	b.n	8002eb2 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fc6b 	bl	800373e <UART_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e039      	b.n	8002ee6 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	e007      	b.n	8002ea0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	781a      	ldrb	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1cc      	bne.n	8002e58 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2140      	movs	r1, #64	; 0x40
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fc38 	bl	800373e <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e006      	b.n	8002ee6 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b08a      	sub	sp, #40	; 0x28
 8002ef2:	af02      	add	r7, sp, #8
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	f040 80b1 	bne.w	800306c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_UART_Receive+0x28>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0a9      	b.n	800306e <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2222      	movs	r2, #34	; 0x22
 8002f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f30:	f7fe f99a 	bl	8001268 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	d10e      	bne.n	8002f6e <HAL_UART_Receive+0x80>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <HAL_UART_Receive+0x76>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002f5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002f62:	e02d      	b.n	8002fc0 <HAL_UART_Receive+0xd2>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	22ff      	movs	r2, #255	; 0xff
 8002f68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002f6c:	e028      	b.n	8002fc0 <HAL_UART_Receive+0xd2>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <HAL_UART_Receive+0xa4>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <HAL_UART_Receive+0x9a>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	22ff      	movs	r2, #255	; 0xff
 8002f82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002f86:	e01b      	b.n	8002fc0 <HAL_UART_Receive+0xd2>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	227f      	movs	r2, #127	; 0x7f
 8002f8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002f90:	e016      	b.n	8002fc0 <HAL_UART_Receive+0xd2>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_UART_Receive+0xca>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d104      	bne.n	8002fae <HAL_UART_Receive+0xc0>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	227f      	movs	r2, #127	; 0x7f
 8002fa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002fac:	e008      	b.n	8002fc0 <HAL_UART_Receive+0xd2>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	223f      	movs	r2, #63	; 0x3f
 8002fb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002fb6:	e003      	b.n	8002fc0 <HAL_UART_Receive+0xd2>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002fc6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd0:	d108      	bne.n	8002fe4 <HAL_UART_Receive+0xf6>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	e003      	b.n	8002fec <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002fec:	e032      	b.n	8003054 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2120      	movs	r1, #32
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fba0 	bl	800373e <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e032      	b.n	800306e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10c      	bne.n	8003028 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	b29a      	uxth	r2, r3
 8003016:	8a7b      	ldrh	r3, [r7, #18]
 8003018:	4013      	ands	r3, r2
 800301a:	b29a      	uxth	r2, r3
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	3302      	adds	r3, #2
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	e00c      	b.n	8003042 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	b2da      	uxtb	r2, r3
 8003030:	8a7b      	ldrh	r3, [r7, #18]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4013      	ands	r3, r2
 8003036:	b2da      	uxtb	r2, r3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3301      	adds	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1c6      	bne.n	8002fee <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800307c:	b08c      	sub	sp, #48	; 0x30
 800307e:	af00      	add	r7, sp, #0
 8003080:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	431a      	orrs	r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	431a      	orrs	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	4313      	orrs	r3, r2
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b94      	ldr	r3, [pc, #592]	; (80032f8 <UART_SetConfig+0x280>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030b0:	430b      	orrs	r3, r1
 80030b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a89      	ldr	r2, [pc, #548]	; (80032fc <UART_SetConfig+0x284>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e0:	4313      	orrs	r3, r2
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80030ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	f023 010f 	bic.w	r1, r3, #15
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a7a      	ldr	r2, [pc, #488]	; (8003300 <UART_SetConfig+0x288>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d127      	bne.n	800316c <UART_SetConfig+0xf4>
 800311c:	2003      	movs	r0, #3
 800311e:	f7ff fdef 	bl	8002d00 <LL_RCC_GetUSARTClockSource>
 8003122:	4603      	mov	r3, r0
 8003124:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003128:	2b03      	cmp	r3, #3
 800312a:	d81b      	bhi.n	8003164 <UART_SetConfig+0xec>
 800312c:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <UART_SetConfig+0xbc>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003145 	.word	0x08003145
 8003138:	08003155 	.word	0x08003155
 800313c:	0800314d 	.word	0x0800314d
 8003140:	0800315d 	.word	0x0800315d
 8003144:	2301      	movs	r3, #1
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314a:	e080      	b.n	800324e <UART_SetConfig+0x1d6>
 800314c:	2302      	movs	r3, #2
 800314e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003152:	e07c      	b.n	800324e <UART_SetConfig+0x1d6>
 8003154:	2304      	movs	r3, #4
 8003156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800315a:	e078      	b.n	800324e <UART_SetConfig+0x1d6>
 800315c:	2308      	movs	r3, #8
 800315e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003162:	e074      	b.n	800324e <UART_SetConfig+0x1d6>
 8003164:	2310      	movs	r3, #16
 8003166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800316a:	e070      	b.n	800324e <UART_SetConfig+0x1d6>
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a64      	ldr	r2, [pc, #400]	; (8003304 <UART_SetConfig+0x28c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d138      	bne.n	80031e8 <UART_SetConfig+0x170>
 8003176:	200c      	movs	r0, #12
 8003178:	f7ff fdc2 	bl	8002d00 <LL_RCC_GetUSARTClockSource>
 800317c:	4603      	mov	r3, r0
 800317e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003182:	2b0c      	cmp	r3, #12
 8003184:	d82c      	bhi.n	80031e0 <UART_SetConfig+0x168>
 8003186:	a201      	add	r2, pc, #4	; (adr r2, 800318c <UART_SetConfig+0x114>)
 8003188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318c:	080031c1 	.word	0x080031c1
 8003190:	080031e1 	.word	0x080031e1
 8003194:	080031e1 	.word	0x080031e1
 8003198:	080031e1 	.word	0x080031e1
 800319c:	080031d1 	.word	0x080031d1
 80031a0:	080031e1 	.word	0x080031e1
 80031a4:	080031e1 	.word	0x080031e1
 80031a8:	080031e1 	.word	0x080031e1
 80031ac:	080031c9 	.word	0x080031c9
 80031b0:	080031e1 	.word	0x080031e1
 80031b4:	080031e1 	.word	0x080031e1
 80031b8:	080031e1 	.word	0x080031e1
 80031bc:	080031d9 	.word	0x080031d9
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c6:	e042      	b.n	800324e <UART_SetConfig+0x1d6>
 80031c8:	2302      	movs	r3, #2
 80031ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ce:	e03e      	b.n	800324e <UART_SetConfig+0x1d6>
 80031d0:	2304      	movs	r3, #4
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d6:	e03a      	b.n	800324e <UART_SetConfig+0x1d6>
 80031d8:	2308      	movs	r3, #8
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031de:	e036      	b.n	800324e <UART_SetConfig+0x1d6>
 80031e0:	2310      	movs	r3, #16
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e6:	e032      	b.n	800324e <UART_SetConfig+0x1d6>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a43      	ldr	r2, [pc, #268]	; (80032fc <UART_SetConfig+0x284>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d12a      	bne.n	8003248 <UART_SetConfig+0x1d0>
 80031f2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80031f6:	f7ff fd95 	bl	8002d24 <LL_RCC_GetLPUARTClockSource>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003200:	d01a      	beq.n	8003238 <UART_SetConfig+0x1c0>
 8003202:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003206:	d81b      	bhi.n	8003240 <UART_SetConfig+0x1c8>
 8003208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320c:	d00c      	beq.n	8003228 <UART_SetConfig+0x1b0>
 800320e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003212:	d815      	bhi.n	8003240 <UART_SetConfig+0x1c8>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <UART_SetConfig+0x1a8>
 8003218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321c:	d008      	beq.n	8003230 <UART_SetConfig+0x1b8>
 800321e:	e00f      	b.n	8003240 <UART_SetConfig+0x1c8>
 8003220:	2300      	movs	r3, #0
 8003222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003226:	e012      	b.n	800324e <UART_SetConfig+0x1d6>
 8003228:	2302      	movs	r3, #2
 800322a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800322e:	e00e      	b.n	800324e <UART_SetConfig+0x1d6>
 8003230:	2304      	movs	r3, #4
 8003232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003236:	e00a      	b.n	800324e <UART_SetConfig+0x1d6>
 8003238:	2308      	movs	r3, #8
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323e:	e006      	b.n	800324e <UART_SetConfig+0x1d6>
 8003240:	2310      	movs	r3, #16
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003246:	e002      	b.n	800324e <UART_SetConfig+0x1d6>
 8003248:	2310      	movs	r3, #16
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <UART_SetConfig+0x284>)
 8003254:	4293      	cmp	r3, r2
 8003256:	f040 80a4 	bne.w	80033a2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800325a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800325e:	2b08      	cmp	r3, #8
 8003260:	d823      	bhi.n	80032aa <UART_SetConfig+0x232>
 8003262:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <UART_SetConfig+0x1f0>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	0800328d 	.word	0x0800328d
 800326c:	080032ab 	.word	0x080032ab
 8003270:	08003295 	.word	0x08003295
 8003274:	080032ab 	.word	0x080032ab
 8003278:	0800329b 	.word	0x0800329b
 800327c:	080032ab 	.word	0x080032ab
 8003280:	080032ab 	.word	0x080032ab
 8003284:	080032ab 	.word	0x080032ab
 8003288:	080032a3 	.word	0x080032a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800328c:	f7ff fa54 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003290:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003292:	e010      	b.n	80032b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <UART_SetConfig+0x290>)
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003298:	e00d      	b.n	80032b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329a:	f7ff f999 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 800329e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032a0:	e009      	b.n	80032b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032a8:	e005      	b.n	80032b6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8137 	beq.w	800352c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	4a12      	ldr	r2, [pc, #72]	; (800330c <UART_SetConfig+0x294>)
 80032c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c8:	461a      	mov	r2, r3
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d305      	bcc.n	80032ee <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d910      	bls.n	8003310 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80032f4:	e11a      	b.n	800352c <UART_SetConfig+0x4b4>
 80032f6:	bf00      	nop
 80032f8:	cfff69f3 	.word	0xcfff69f3
 80032fc:	40008000 	.word	0x40008000
 8003300:	40013800 	.word	0x40013800
 8003304:	40004400 	.word	0x40004400
 8003308:	00f42400 	.word	0x00f42400
 800330c:	08003dfc 	.word	0x08003dfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	2200      	movs	r2, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	60fa      	str	r2, [r7, #12]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	4a8e      	ldr	r2, [pc, #568]	; (8003558 <UART_SetConfig+0x4e0>)
 800331e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003322:	b29b      	uxth	r3, r3
 8003324:	2200      	movs	r2, #0
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800332e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003332:	f7fc ff21 	bl	8000178 <__aeabi_uldivmod>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	020b      	lsls	r3, r1, #8
 8003348:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800334c:	0202      	lsls	r2, r0, #8
 800334e:	6979      	ldr	r1, [r7, #20]
 8003350:	6849      	ldr	r1, [r1, #4]
 8003352:	0849      	lsrs	r1, r1, #1
 8003354:	2000      	movs	r0, #0
 8003356:	460c      	mov	r4, r1
 8003358:	4605      	mov	r5, r0
 800335a:	eb12 0804 	adds.w	r8, r2, r4
 800335e:	eb43 0905 	adc.w	r9, r3, r5
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	469a      	mov	sl, r3
 800336a:	4693      	mov	fp, r2
 800336c:	4652      	mov	r2, sl
 800336e:	465b      	mov	r3, fp
 8003370:	4640      	mov	r0, r8
 8003372:	4649      	mov	r1, r9
 8003374:	f7fc ff00 	bl	8000178 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003386:	d308      	bcc.n	800339a <UART_SetConfig+0x322>
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800338e:	d204      	bcs.n	800339a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6a3a      	ldr	r2, [r7, #32]
 8003396:	60da      	str	r2, [r3, #12]
 8003398:	e0c8      	b.n	800352c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033a0:	e0c4      	b.n	800352c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033aa:	d167      	bne.n	800347c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80033ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d828      	bhi.n	8003406 <UART_SetConfig+0x38e>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <UART_SetConfig+0x344>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	080033e9 	.word	0x080033e9
 80033c4:	080033f1 	.word	0x080033f1
 80033c8:	08003407 	.word	0x08003407
 80033cc:	080033f7 	.word	0x080033f7
 80033d0:	08003407 	.word	0x08003407
 80033d4:	08003407 	.word	0x08003407
 80033d8:	08003407 	.word	0x08003407
 80033dc:	080033ff 	.word	0x080033ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e0:	f7ff f9aa 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 80033e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033e6:	e014      	b.n	8003412 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e8:	f7ff f9b8 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 80033ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033ee:	e010      	b.n	8003412 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f0:	4b5a      	ldr	r3, [pc, #360]	; (800355c <UART_SetConfig+0x4e4>)
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033f4:	e00d      	b.n	8003412 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f6:	f7ff f8eb 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 80033fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033fc:	e009      	b.n	8003412 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003404:	e005      	b.n	8003412 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003410:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8089 	beq.w	800352c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	4a4e      	ldr	r2, [pc, #312]	; (8003558 <UART_SetConfig+0x4e0>)
 8003420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003424:	461a      	mov	r2, r3
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	fbb3 f3f2 	udiv	r3, r3, r2
 800342c:	005a      	lsls	r2, r3, #1
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	441a      	add	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	d916      	bls.n	8003474 <UART_SetConfig+0x3fc>
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344c:	d212      	bcs.n	8003474 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f023 030f 	bic.w	r3, r3, #15
 8003456:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	b29b      	uxth	r3, r3
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	b29a      	uxth	r2, r3
 8003464:	8bfb      	ldrh	r3, [r7, #30]
 8003466:	4313      	orrs	r3, r2
 8003468:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	8bfa      	ldrh	r2, [r7, #30]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	e05b      	b.n	800352c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800347a:	e057      	b.n	800352c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800347c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003480:	2b08      	cmp	r3, #8
 8003482:	d828      	bhi.n	80034d6 <UART_SetConfig+0x45e>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <UART_SetConfig+0x414>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034c1 	.word	0x080034c1
 8003498:	080034d7 	.word	0x080034d7
 800349c:	080034c7 	.word	0x080034c7
 80034a0:	080034d7 	.word	0x080034d7
 80034a4:	080034d7 	.word	0x080034d7
 80034a8:	080034d7 	.word	0x080034d7
 80034ac:	080034cf 	.word	0x080034cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b0:	f7ff f942 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 80034b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034b6:	e014      	b.n	80034e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b8:	f7ff f950 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 80034bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034be:	e010      	b.n	80034e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c0:	4b26      	ldr	r3, [pc, #152]	; (800355c <UART_SetConfig+0x4e4>)
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034c4:	e00d      	b.n	80034e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c6:	f7ff f883 	bl	80025d0 <HAL_RCC_GetSysClockFreq>
 80034ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034cc:	e009      	b.n	80034e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034d4:	e005      	b.n	80034e2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034e0:	bf00      	nop
    }

    if (pclk != 0U)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d021      	beq.n	800352c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <UART_SetConfig+0x4e0>)
 80034ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f2:	461a      	mov	r2, r3
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	441a      	add	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d909      	bls.n	8003526 <UART_SetConfig+0x4ae>
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d205      	bcs.n	8003526 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	b29a      	uxth	r2, r3
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	e002      	b.n	800352c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2201      	movs	r2, #1
 8003530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2201      	movs	r2, #1
 8003538:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2200      	movs	r2, #0
 8003540:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003548:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800354c:	4618      	mov	r0, r3
 800354e:	3730      	adds	r7, #48	; 0x30
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003556:	bf00      	nop
 8003558:	08003dfc 	.word	0x08003dfc
 800355c:	00f42400 	.word	0x00f42400

08003560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01a      	beq.n	8003676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800365e:	d10a      	bne.n	8003676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  }
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af02      	add	r7, sp, #8
 80036a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036b2:	f7fd fdd9 	bl	8001268 <HAL_GetTick>
 80036b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d10e      	bne.n	80036e4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f832 	bl	800373e <UART_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e028      	b.n	8003736 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d10e      	bne.n	8003710 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f81c 	bl	800373e <UART_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e012      	b.n	8003736 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b09c      	sub	sp, #112	; 0x70
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374e:	e0a9      	b.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	f000 80a5 	beq.w	80038a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fd fd85 	bl	8001268 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <UART_WaitOnFlagUntilTimeout+0x32>
 800376a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800376c:	2b00      	cmp	r3, #0
 800376e:	d140      	bne.n	80037f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003778:	e853 3f00 	ldrex	r3, [r3]
 800377c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800377e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003780:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003784:	667b      	str	r3, [r7, #100]	; 0x64
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800378e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003790:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003794:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003796:	e841 2300 	strex	r3, r2, [r1]
 800379a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800379c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e6      	bne.n	8003770 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3308      	adds	r3, #8
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	663b      	str	r3, [r7, #96]	; 0x60
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3308      	adds	r3, #8
 80037c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80037c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e5      	bne.n	80037a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e069      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d051      	beq.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380e:	d149      	bne.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003818:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800382e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
 800383a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800383e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e6      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3308      	adds	r3, #8
 8003852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	613b      	str	r3, [r7, #16]
   return(result);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	66bb      	str	r3, [r7, #104]	; 0x68
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3308      	adds	r3, #8
 800386a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800386c:	623a      	str	r2, [r7, #32]
 800386e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	69f9      	ldr	r1, [r7, #28]
 8003872:	6a3a      	ldr	r2, [r7, #32]
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	61bb      	str	r3, [r7, #24]
   return(result);
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e5      	bne.n	800384c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e010      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69da      	ldr	r2, [r3, #28]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4013      	ands	r3, r2
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	429a      	cmp	r2, r3
 80038c0:	f43f af46 	beq.w	8003750 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3770      	adds	r7, #112	; 0x70
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e027      	b.n	8003934 <HAL_UARTEx_DisableFifoMode+0x66>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	; 0x24
 80038f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003912:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003952:	2302      	movs	r3, #2
 8003954:	e02d      	b.n	80039b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2224      	movs	r2, #36	; 0x24
 8003962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f850 	bl	8003a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e02d      	b.n	8003a2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2224      	movs	r2, #36	; 0x24
 80039de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f812 	bl	8003a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d108      	bne.n	8003a5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a58:	e031      	b.n	8003abe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a5e:	2308      	movs	r3, #8
 8003a60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	0e5b      	lsrs	r3, r3, #25
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	0f5b      	lsrs	r3, r3, #29
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a82:	7bbb      	ldrb	r3, [r7, #14]
 8003a84:	7b3a      	ldrb	r2, [r7, #12]
 8003a86:	4910      	ldr	r1, [pc, #64]	; (8003ac8 <UARTEx_SetNbDataToProcess+0x90>)
 8003a88:	5c8a      	ldrb	r2, [r1, r2]
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a8e:	7b3a      	ldrb	r2, [r7, #12]
 8003a90:	490e      	ldr	r1, [pc, #56]	; (8003acc <UARTEx_SetNbDataToProcess+0x94>)
 8003a92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	7b7a      	ldrb	r2, [r7, #13]
 8003aa4:	4908      	ldr	r1, [pc, #32]	; (8003ac8 <UARTEx_SetNbDataToProcess+0x90>)
 8003aa6:	5c8a      	ldrb	r2, [r1, r2]
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003aac:	7b7a      	ldrb	r2, [r7, #13]
 8003aae:	4907      	ldr	r1, [pc, #28]	; (8003acc <UARTEx_SetNbDataToProcess+0x94>)
 8003ab0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ab2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	08003e14 	.word	0x08003e14
 8003acc:	08003e1c 	.word	0x08003e1c

08003ad0 <__libc_init_array>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4d0d      	ldr	r5, [pc, #52]	; (8003b08 <__libc_init_array+0x38>)
 8003ad4:	4c0d      	ldr	r4, [pc, #52]	; (8003b0c <__libc_init_array+0x3c>)
 8003ad6:	1b64      	subs	r4, r4, r5
 8003ad8:	10a4      	asrs	r4, r4, #2
 8003ada:	2600      	movs	r6, #0
 8003adc:	42a6      	cmp	r6, r4
 8003ade:	d109      	bne.n	8003af4 <__libc_init_array+0x24>
 8003ae0:	4d0b      	ldr	r5, [pc, #44]	; (8003b10 <__libc_init_array+0x40>)
 8003ae2:	4c0c      	ldr	r4, [pc, #48]	; (8003b14 <__libc_init_array+0x44>)
 8003ae4:	f000 f820 	bl	8003b28 <_init>
 8003ae8:	1b64      	subs	r4, r4, r5
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	2600      	movs	r6, #0
 8003aee:	42a6      	cmp	r6, r4
 8003af0:	d105      	bne.n	8003afe <__libc_init_array+0x2e>
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af8:	4798      	blx	r3
 8003afa:	3601      	adds	r6, #1
 8003afc:	e7ee      	b.n	8003adc <__libc_init_array+0xc>
 8003afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b02:	4798      	blx	r3
 8003b04:	3601      	adds	r6, #1
 8003b06:	e7f2      	b.n	8003aee <__libc_init_array+0x1e>
 8003b08:	08003e2c 	.word	0x08003e2c
 8003b0c:	08003e2c 	.word	0x08003e2c
 8003b10:	08003e2c 	.word	0x08003e2c
 8003b14:	08003e30 	.word	0x08003e30

08003b18 <memset>:
 8003b18:	4402      	add	r2, r0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d100      	bne.n	8003b22 <memset+0xa>
 8003b20:	4770      	bx	lr
 8003b22:	f803 1b01 	strb.w	r1, [r3], #1
 8003b26:	e7f9      	b.n	8003b1c <memset+0x4>

08003b28 <_init>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr

08003b34 <_fini>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr
